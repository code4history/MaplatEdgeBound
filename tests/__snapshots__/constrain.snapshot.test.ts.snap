// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`EdgeBound Integration-Based Unit Tests > Complex Operations > should handle sequence of operations from integration test > operation-sequence-results 1`] = `
[
  {
    "result": 2,
    "success": true,
  },
  {
    "result": Constrain {
      "consd": BitSet8 {
        "W": 8,
        "bs": Uint8Array [
          20,
        ],
      },
      "del": Delaunator {
        "_cx": 150,
        "_cy": 158.33333333333331,
        "_dists": Float64Array [
          11736.111111111108,
          11736.111111111113,
          36736.11111111112,
          11736.111111111113,
        ],
        "_halfedges": Int32Array [
          -1,
          -1,
          4,
          -1,
          2,
          -1,
          0,
          0,
          0,
        ],
        "_hashSize": 2,
        "_hullHash": Int32Array [
          0,
          1,
        ],
        "_hullNext": Uint32Array [
          1,
          2,
          3,
          0,
        ],
        "_hullPrev": Uint32Array [
          3,
          0,
          1,
          2,
        ],
        "_hullStart": 1,
        "_hullTri": Uint32Array [
          2,
          3,
          4,
          1,
        ],
        "_ids": Uint32Array [
          0,
          1,
          3,
          2,
        ],
        "_triangles": Uint32Array [
          2,
          3,
          0,
          1,
          2,
          0,
          0,
          0,
          0,
        ],
        "coords": Float64Array [
          150,
          50,
          50,
          200,
          150,
          350,
          250,
          200,
        ],
        "halfedges": Int32Array [
          -1,
          -1,
          4,
          -1,
          2,
          -1,
        ],
        "hull": Uint32Array [
          1,
          2,
          3,
          0,
        ],
        "triangles": Uint32Array [
          2,
          3,
          0,
          1,
          2,
          0,
        ],
        "trianglesLen": 6,
      },
      "flips": BitSet8 {
        "W": 8,
        "bs": Uint8Array [
          0,
        ],
      },
      "vertMap": Uint32Array [
        1,
        5,
        3,
        0,
      ],
    },
    "success": true,
  },
  {
    "result": 2,
    "success": true,
  },
  {
    "result": true,
    "success": true,
  },
]
`;

exports[`EdgeBound Integration-Based Unit Tests > Edge Cases > should handle almost-collinear points correctly > almost-collinear-constraint-result 1`] = `-1`;

exports[`EdgeBound Integration-Based Unit Tests > Edge Cases > should handle near-but-valid points > near-valid-constraint-result 1`] = `-1`;

exports[`EdgeBound Integration-Based Unit Tests > State Transitions > should maintain correct edge states through operations > edge-state-transitions 1`] = `
[
  {
    "edge01": 2,
    "edge02": Infinity,
    "operation": "initial",
  },
  {
    "edge01": 5,
    "edge02": 2,
    "operation": "constrain-0-2",
  },
  {
    "edge01": 5,
    "edge02": 2,
    "operation": "delaunify",
  },
]
`;

exports[`EdgeBound Integration-Based Unit Tests > State Transitions > should record state changes during constraint operation > state-after-constraint 1`] = `
{
  "halfedges": [
    5,
    -1,
    -1,
    -1,
    -1,
    0,
  ],
  "triangles": [
    1,
    3,
    0,
    1,
    2,
    3,
  ],
  "vertMap": [
    1,
    2,
    3,
    4,
  ],
}
`;
